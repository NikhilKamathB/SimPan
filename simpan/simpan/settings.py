"""
Django settings for simpan project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import sys
import environ
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    # Django
    DEBUG=(bool, True),
    SECRET_KEY=(
        str, "django-insecure-4$@mf5t0@7#v6$ubbna$)gd)d_65l89zxr+c*#a_ysdxf0c)u&"),
    STATIC_ROOT=(str, "static_colect"),
    # Langchain
    RAW_DATA_PATH=(str, "./static_base/data"),
    TOP_K=(int, 4),
    FETCH_K=(int, 20),
    LAMBDA_MULTIPLIER=(float, 0.5),
    CHUNK_SIZE=(int, 4000),
    CHUNK_OVERLAP=(int, 200),
    EMBEDDING_TYPE=(str, "text-embedding-3-large"),
    SEARCH_TYPE=(str, "similarity"),
    DOCUMENT_SEPARATOR=(str, "\n\n"),
    LLM_MODEL_NAME=(str, "gpt-3.5-turbo"),
    LLM_TEMPERATURE=(float, 1.0),
    LLM_MAX_TOKEN_LENGTH=(int, None),
    LLM_TOP_P=(float, 1.0),
    LLM_PRESENCE_PENALTY=(float, 0.0),
    LLM_FREQUENCY_PENALTY=(float, 0.0),
    LLM_RAG_PROMPT_NAME=(str, "portfolio-rag-prompt"),
    LLM_AGENT_MAX_ITERATIONS=(int, 5),
    # Langsmith
    LANGCHAIN_TRACING_V2=(bool, True),
    LANGCHAIN_ENDPOINT=(str, "https://api.smith.langchain.com"),
    LANGCHAIN_API_KEY=(str, ""),
    LANGCHAIN_PROJECT=(str, "Portfolio"),
)


env_file = os.path.join(BASE_DIR, ".env")
env.read_env(env_file)

# Add to path the main project directory.
sys.path.append(str(BASE_DIR.parent)) # String representation of the posix path.

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Apps
    'home.apps.HomeConfig',
    'comfyui.apps.ComfyuiConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'simpan.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'simpan.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

'''
To install postgres using docker:

docker run -d --name postgres -p 5499:5432 \                                                                                                                   tyche@tyche
-e POSTGRES_USER=portfolio \
-e POSTGRES_PASSWORD=portfolio \
-e POSTGRES_DB=portfolio \
postgres:latest

'''
# Use postgres.
#
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': os.getenv('PGDATABASE', 'postgres'),
#         'USER': os.getenv('PGUSER', 'postgres'),
#         'PASSWORD': os.getenv('PGPASSWORD', 'postgres'),
#         'HOST': os.getenv('PGHOST', '127.0.0.1'),
#         'PORT': os.getenv('PGPORT', '5432'),
#     },
# }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Los_Angeles'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = 'static/'
STATIC_BASE = 'static'
STATICFILES_DIRS = [
    BASE_DIR / STATIC_BASE,
]
STATIC_ROOT = env("STATIC_ROOT")

# Media handling.
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery with rabbitmq configuration.
'''
To install rabbitmq using docker:
docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13-management

http://host:15672 will show the rabbitmq management console.
http://host:5555 will show the flower monitoring console.
'''
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "amqp://guest:guest@localhost:5672//")

# Django Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{levelname}] | [{asctime}] | [{module}] | [{process:d}] | [{thread:d}] | {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{levelname}] | [{asctime}] | [{module}] | {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": os.getenv("LOG_LEVEL", "INFO"),
            "class": "logging.FileHandler",
            "filename": "django.log",
            "formatter": "verbose",
        },
        "console": {
            "level": os.getenv("LOG_LEVEL", "INFO"),
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": os.getenv("LOG_LEVEL", "INFO"),
            "propagate": True,
        },
        "home": {
            "handlers": ["file", "console"],
            "level": os.getenv("LOG_LEVEL", "INFO"),
            "propagate": True,
        },
        "comfyui": {
            "handlers": ["file", "console"],
            "level": os.getenv("LOG_LEVEL", "INFO"),
            "propagate": True,
        },
    },
}

# Langchain settings
LLM_MODEL_NAME = env("LLM_MODEL_NAME")
LLM_TEMPERATURE = env("LLM_TEMPERATURE")
LLM_MAX_TOKEN_LENGTH = env("LLM_MAX_TOKEN_LENGTH")
LLM_TOP_P = env("LLM_TOP_P")
LLM_PRESENCE_PENALTY = env("LLM_PRESENCE_PENALTY")
LLM_FREQUENCY_PENALTY = env("LLM_FREQUENCY_PENALTY")
LLM_RAG_PROMPT_NAME = env("LLM_RAG_PROMPT_NAME")
LLM_AGENT_MAX_ITERATIONS = env("LLM_AGENT_MAX_ITERATIONS")

# GIT Submodules
SUBMODULES_DIR = BASE_DIR.parent / os.getenv("SUBMODULES_DIR", "third_party")
LITEGRAPH_DIR = os.getenv("LITEGRAPH_DIR", "litegraph")
SDC_DIR = os.getenv("SDC_DIR", "SDC")
